import pandas as pd
import os


#Task 1 : Merge the 12months of sales into a single csv file
#how do you concatenante data frames in pandas

df = pd.read_csv("sales_data")
files = [file for file in os.listdir('./Sales_Data')]

all_months_data = pd.DataFrame()

for file in files:
    df = pd.read_csv("./sales_data/"+file)
    all_months_data = pd.concat([all_months_data, df])
all_months_data.to_csv("all_data.csv", index=False)
    


#Read in updated dataframe
all_data = pd.read_csv("all_data.csv")
all_data.head()


###Augment data with additional columns
### Task : Add Month Column

all_data['Month'] = all_data['Order Date'].str[0:2] #first 2 str of order date to find only months 
all_data['Month'] = all_data['Month'].astype('int32')
####this has an error so we have to clean the data

#Clean up the data!
#Drop rows of NAN
#nan_df = df.loc[df['Month'] == 'NAN']
nan_df = all_data[all_data.isna().any(axis=1)]
nan_df.head()

all_data = all_data.dropna(how='all')
all_data.head()

#Find 'Or' and delete it
temp_df = all_data[all_data['Order Date'].str[0:2] == 'Or']
temp_df.head()
#Find data thats not equal to 'Or' above
all_data = all_data[all_data['Order Date'].str[0:2] != 'Or']
all_data

###Augment data with additional columns
### Task : Add Month Column

all_data['Month'] = all_data['Order Date'].str[0:2] #first 2 str of order date to find only months 
all_data['Month'] = all_data['Month'].astype('int32')


#Question 1 : what was the best month for sales? How much was earned that month?


###task3 add a sales column
all_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']
#it prints an error saying 'can't multiply sequence by non-int of type 'str
#we have to clean the data once again here

###Convert columns to the correct type
all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])   # make integer
all_data['Price Each'] =  pd.to_numeric(all_data['Price Each'])             #make float
all_data.head()

###try again
all_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']
df.head()
#now it worked! :)
#finally let's find best month for sales, how much was earned that month

results all_data.groupby('Month').sum()
import matplotlib.pyplot as plt #to visualize result

months = range(1,13)

plt.bar(months, results['Sales'])
plt.xticks(months)
plt.ylabel('Sales in USD ($)')
plt.xlabel('Month number')
plt.show


#Task 4. Add a city column
#let's use apply() => allows us to run any function on our df
#lamda x allows us to grab cell content
def get_city(address):
    return address.split(',')[1]

def get_state(address):
    return address.split(',')[2].split(' ')[1]
all_data['Column'] = all_data['Purchase Address'].apply(lambda x: get_city(x))
#to change column 'column -> city
#split by comma and grab the first index
all_data = all_data.drop(columns='Column', inplace=True)
all_data['City'] = all_data['Purchase Address'].apply(lambda x: get_city(x) + ' ' +get_state(x))

all_data.head() #column that includes city has been created correctly
















